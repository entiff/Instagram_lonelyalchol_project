install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/UserDesktop/전지희Anaconda/file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:\Users\User\Desktop\전지희Anaconda\file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("\Users\User\Desktop\전지희Anaconda\file.csv", header=TRUE)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:\Users\User\Desktop\전지희Anaconda\file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:\\Users\User\Desktop\전지희Anaconda\file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:\Users\User\Desktop\전지희Anaconda\file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "latin1")
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "latin1", stringsAsFactors=FALSE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "ISO-8859-1", stringsAsFactors=FALSE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "UCS-2LE", stringsAsFactors=FALSE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "UTF--8", stringsAsFactors=FALSE)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "UTF-8", stringsAsFactors=FALSE)
# String형태로 들어와있는 None 값을 R의 NA값으로 바꿔주기
for (i in 1:9969){
for (j in 1:50)
if (file[i,j]=="None"){
file[i,j] = NA
}
}
summary(file)
View(file)
# 파이썬에서 전처리 작업한 데이터셋 불러오기
file = read.csv("C:/Users/User/Desktop/전지희Anaconda/file.csv", header=TRUE, fileEncoding = "UTF-8", stringsAsFactors=FALSE)
for (i in 1:9969){
for (j in 1:50)
if (file[i,j]=="None"){
file[i,j] = NA
}
}
# 19번 줄의 함수를 사용할 때 매개변수로 파일을 넣어줘야하므로, 데이터프레임을 export했다가 다시 불러들이는 코드
write.csv(file, "file2.csv")
dataset = read.transactions('/Users/JiheeJeon/file2.csv', sep = ',', rm.duplicates = TRUE, encoding="UTF-8")
dataset = read.transactions('file2.csv', sep = ',', rm.duplicates = TRUE, encoding="UTF-8")
# apriori 함수에 사용할 수 있는 transaction 형태의 데이터 포맷으로 변환
transaction = as(dataset, "transactions")
# 가장 많이 나오는 아이템 추출
itemFrequencyPlot(transaction, topN = 10)
# 실험하기: support, confidence, minlen을 바꿔가면서.
rules = apriori(data = transaction, parameter = list(support = 0.05, confidence = 0.2, minlen = 2,maxlen=5,maxtime=10))
